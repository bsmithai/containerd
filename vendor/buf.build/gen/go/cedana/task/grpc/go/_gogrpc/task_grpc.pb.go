// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: task.proto

package _gogrpc

import (
	_go "buf.build/gen/go/cedana/task/protocolbuffers/go"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskService_JobDump_FullMethodName                 = "/cedana.services.task.TaskService/JobDump"
	TaskService_JobRestore_FullMethodName              = "/cedana.services.task.TaskService/JobRestore"
	TaskService_JobRestoreAttach_FullMethodName        = "/cedana.services.task.TaskService/JobRestoreAttach"
	TaskService_JobQuery_FullMethodName                = "/cedana.services.task.TaskService/JobQuery"
	TaskService_Start_FullMethodName                   = "/cedana.services.task.TaskService/Start"
	TaskService_StartAttach_FullMethodName             = "/cedana.services.task.TaskService/StartAttach"
	TaskService_Dump_FullMethodName                    = "/cedana.services.task.TaskService/Dump"
	TaskService_Restore_FullMethodName                 = "/cedana.services.task.TaskService/Restore"
	TaskService_RestoreAttach_FullMethodName           = "/cedana.services.task.TaskService/RestoreAttach"
	TaskService_Manage_FullMethodName                  = "/cedana.services.task.TaskService/Manage"
	TaskService_ContainerdDump_FullMethodName          = "/cedana.services.task.TaskService/ContainerdDump"
	TaskService_ContainerdRestore_FullMethodName       = "/cedana.services.task.TaskService/ContainerdRestore"
	TaskService_ContainerdQuery_FullMethodName         = "/cedana.services.task.TaskService/ContainerdQuery"
	TaskService_ContainerdRootfsDump_FullMethodName    = "/cedana.services.task.TaskService/ContainerdRootfsDump"
	TaskService_ContainerdRootfsRestore_FullMethodName = "/cedana.services.task.TaskService/ContainerdRootfsRestore"
	TaskService_RuncDump_FullMethodName                = "/cedana.services.task.TaskService/RuncDump"
	TaskService_RuncRestore_FullMethodName             = "/cedana.services.task.TaskService/RuncRestore"
	TaskService_RuncQuery_FullMethodName               = "/cedana.services.task.TaskService/RuncQuery"
	TaskService_RuncGetPausePid_FullMethodName         = "/cedana.services.task.TaskService/RuncGetPausePid"
	TaskService_RuncManage_FullMethodName              = "/cedana.services.task.TaskService/RuncManage"
	TaskService_CRIORootfsDump_FullMethodName          = "/cedana.services.task.TaskService/CRIORootfsDump"
	TaskService_CRIOImagePush_FullMethodName           = "/cedana.services.task.TaskService/CRIOImagePush"
	TaskService_LogStreaming_FullMethodName            = "/cedana.services.task.TaskService/LogStreaming"
	TaskService_ProcessStateStreaming_FullMethodName   = "/cedana.services.task.TaskService/ProcessStateStreaming"
	TaskService_DetailedHealthCheck_FullMethodName     = "/cedana.services.task.TaskService/DetailedHealthCheck"
	TaskService_KataDump_FullMethodName                = "/cedana.services.task.TaskService/KataDump"
	TaskService_KataRestore_FullMethodName             = "/cedana.services.task.TaskService/KataRestore"
	TaskService_GetConfig_FullMethodName               = "/cedana.services.task.TaskService/GetConfig"
	TaskService_QueueCheckpoint_FullMethodName         = "/cedana.services.task.TaskService/QueueCheckpoint"
	TaskService_QueueRestore_FullMethodName            = "/cedana.services.task.TaskService/QueueRestore"
	TaskService_JobStatus_FullMethodName               = "/cedana.services.task.TaskService/JobStatus"
	TaskService_GetContainerInfo_FullMethodName        = "/cedana.services.task.TaskService/GetContainerInfo"
)

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskServiceClient interface {
	// Managed Job
	JobDump(ctx context.Context, in *_go.JobDumpArgs, opts ...grpc.CallOption) (*_go.JobDumpResp, error)
	JobRestore(ctx context.Context, in *_go.JobRestoreArgs, opts ...grpc.CallOption) (*_go.JobRestoreResp, error)
	JobRestoreAttach(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[_go.AttachArgs, _go.AttachResp], error)
	JobQuery(ctx context.Context, in *_go.JobQueryArgs, opts ...grpc.CallOption) (*_go.JobQueryResp, error)
	// Process
	Start(ctx context.Context, in *_go.StartArgs, opts ...grpc.CallOption) (*_go.StartResp, error)
	StartAttach(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[_go.AttachArgs, _go.AttachResp], error)
	Dump(ctx context.Context, in *_go.DumpArgs, opts ...grpc.CallOption) (*_go.DumpResp, error)
	Restore(ctx context.Context, in *_go.RestoreArgs, opts ...grpc.CallOption) (*_go.RestoreResp, error)
	RestoreAttach(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[_go.AttachArgs, _go.AttachResp], error)
	Manage(ctx context.Context, in *_go.ManageArgs, opts ...grpc.CallOption) (*_go.ManageResp, error)
	// Containerd
	ContainerdDump(ctx context.Context, in *_go.ContainerdDumpArgs, opts ...grpc.CallOption) (*_go.ContainerdDumpResp, error)
	ContainerdRestore(ctx context.Context, in *_go.ContainerdRestoreArgs, opts ...grpc.CallOption) (*_go.ContainerdRestoreResp, error)
	ContainerdQuery(ctx context.Context, in *_go.ContainerdQueryArgs, opts ...grpc.CallOption) (*_go.ContainerdQueryResp, error)
	ContainerdRootfsDump(ctx context.Context, in *_go.ContainerdRootfsDumpArgs, opts ...grpc.CallOption) (*_go.ContainerdRootfsDumpResp, error)
	ContainerdRootfsRestore(ctx context.Context, in *_go.ContainerdRootfsRestoreArgs, opts ...grpc.CallOption) (*_go.ContainerdRootfsRestoreResp, error)
	// Runc
	RuncDump(ctx context.Context, in *_go.RuncDumpArgs, opts ...grpc.CallOption) (*_go.RuncDumpResp, error)
	RuncRestore(ctx context.Context, in *_go.RuncRestoreArgs, opts ...grpc.CallOption) (*_go.RuncRestoreResp, error)
	RuncQuery(ctx context.Context, in *_go.RuncQueryArgs, opts ...grpc.CallOption) (*_go.RuncQueryResp, error)
	RuncGetPausePid(ctx context.Context, in *_go.RuncGetPausePidArgs, opts ...grpc.CallOption) (*_go.RuncGetPausePidResp, error)
	RuncManage(ctx context.Context, in *_go.RuncManageArgs, opts ...grpc.CallOption) (*_go.RuncManageResp, error)
	// CRIO
	CRIORootfsDump(ctx context.Context, in *_go.CRIORootfsDumpArgs, opts ...grpc.CallOption) (*_go.CRIORootfsDumpResp, error)
	CRIOImagePush(ctx context.Context, in *_go.CRIOImagePushArgs, opts ...grpc.CallOption) (*_go.CRIOImagePushResp, error)
	// Streaming
	LogStreaming(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[_go.LogStreamingResp, _go.LogStreamingArgs], error)
	ProcessStateStreaming(ctx context.Context, in *_go.ProcessStateStreamingArgs, opts ...grpc.CallOption) (grpc.ServerStreamingClient[_go.ProcessState], error)
	// Health
	DetailedHealthCheck(ctx context.Context, in *_go.DetailedHealthCheckRequest, opts ...grpc.CallOption) (*_go.DetailedHealthCheckResponse, error)
	// Kata
	KataDump(ctx context.Context, in *_go.DumpArgs, opts ...grpc.CallOption) (*_go.DumpResp, error)
	KataRestore(ctx context.Context, in *_go.RestoreArgs, opts ...grpc.CallOption) (*_go.RestoreResp, error)
	// Config
	GetConfig(ctx context.Context, in *_go.GetConfigRequest, opts ...grpc.CallOption) (*_go.GetConfigResponse, error)
	// JobQueue
	QueueCheckpoint(ctx context.Context, in *_go.QueueJobCheckpointRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	QueueRestore(ctx context.Context, in *_go.QueueJobRestoreRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	JobStatus(ctx context.Context, in *_go.QueueJobID, opts ...grpc.CallOption) (*_go.QueueJobStatus, error)
	// ASR
	GetContainerInfo(ctx context.Context, in *_go.ContainerInfoRequest, opts ...grpc.CallOption) (*_go.ContainersInfo, error)
}

type taskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceClient(cc grpc.ClientConnInterface) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) JobDump(ctx context.Context, in *_go.JobDumpArgs, opts ...grpc.CallOption) (*_go.JobDumpResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_go.JobDumpResp)
	err := c.cc.Invoke(ctx, TaskService_JobDump_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) JobRestore(ctx context.Context, in *_go.JobRestoreArgs, opts ...grpc.CallOption) (*_go.JobRestoreResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_go.JobRestoreResp)
	err := c.cc.Invoke(ctx, TaskService_JobRestore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) JobRestoreAttach(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[_go.AttachArgs, _go.AttachResp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TaskService_ServiceDesc.Streams[0], TaskService_JobRestoreAttach_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[_go.AttachArgs, _go.AttachResp]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskService_JobRestoreAttachClient = grpc.BidiStreamingClient[_go.AttachArgs, _go.AttachResp]

func (c *taskServiceClient) JobQuery(ctx context.Context, in *_go.JobQueryArgs, opts ...grpc.CallOption) (*_go.JobQueryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_go.JobQueryResp)
	err := c.cc.Invoke(ctx, TaskService_JobQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) Start(ctx context.Context, in *_go.StartArgs, opts ...grpc.CallOption) (*_go.StartResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_go.StartResp)
	err := c.cc.Invoke(ctx, TaskService_Start_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) StartAttach(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[_go.AttachArgs, _go.AttachResp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TaskService_ServiceDesc.Streams[1], TaskService_StartAttach_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[_go.AttachArgs, _go.AttachResp]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskService_StartAttachClient = grpc.BidiStreamingClient[_go.AttachArgs, _go.AttachResp]

func (c *taskServiceClient) Dump(ctx context.Context, in *_go.DumpArgs, opts ...grpc.CallOption) (*_go.DumpResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_go.DumpResp)
	err := c.cc.Invoke(ctx, TaskService_Dump_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) Restore(ctx context.Context, in *_go.RestoreArgs, opts ...grpc.CallOption) (*_go.RestoreResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_go.RestoreResp)
	err := c.cc.Invoke(ctx, TaskService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) RestoreAttach(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[_go.AttachArgs, _go.AttachResp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TaskService_ServiceDesc.Streams[2], TaskService_RestoreAttach_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[_go.AttachArgs, _go.AttachResp]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskService_RestoreAttachClient = grpc.BidiStreamingClient[_go.AttachArgs, _go.AttachResp]

func (c *taskServiceClient) Manage(ctx context.Context, in *_go.ManageArgs, opts ...grpc.CallOption) (*_go.ManageResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_go.ManageResp)
	err := c.cc.Invoke(ctx, TaskService_Manage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ContainerdDump(ctx context.Context, in *_go.ContainerdDumpArgs, opts ...grpc.CallOption) (*_go.ContainerdDumpResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_go.ContainerdDumpResp)
	err := c.cc.Invoke(ctx, TaskService_ContainerdDump_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ContainerdRestore(ctx context.Context, in *_go.ContainerdRestoreArgs, opts ...grpc.CallOption) (*_go.ContainerdRestoreResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_go.ContainerdRestoreResp)
	err := c.cc.Invoke(ctx, TaskService_ContainerdRestore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ContainerdQuery(ctx context.Context, in *_go.ContainerdQueryArgs, opts ...grpc.CallOption) (*_go.ContainerdQueryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_go.ContainerdQueryResp)
	err := c.cc.Invoke(ctx, TaskService_ContainerdQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ContainerdRootfsDump(ctx context.Context, in *_go.ContainerdRootfsDumpArgs, opts ...grpc.CallOption) (*_go.ContainerdRootfsDumpResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_go.ContainerdRootfsDumpResp)
	err := c.cc.Invoke(ctx, TaskService_ContainerdRootfsDump_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ContainerdRootfsRestore(ctx context.Context, in *_go.ContainerdRootfsRestoreArgs, opts ...grpc.CallOption) (*_go.ContainerdRootfsRestoreResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_go.ContainerdRootfsRestoreResp)
	err := c.cc.Invoke(ctx, TaskService_ContainerdRootfsRestore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) RuncDump(ctx context.Context, in *_go.RuncDumpArgs, opts ...grpc.CallOption) (*_go.RuncDumpResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_go.RuncDumpResp)
	err := c.cc.Invoke(ctx, TaskService_RuncDump_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) RuncRestore(ctx context.Context, in *_go.RuncRestoreArgs, opts ...grpc.CallOption) (*_go.RuncRestoreResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_go.RuncRestoreResp)
	err := c.cc.Invoke(ctx, TaskService_RuncRestore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) RuncQuery(ctx context.Context, in *_go.RuncQueryArgs, opts ...grpc.CallOption) (*_go.RuncQueryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_go.RuncQueryResp)
	err := c.cc.Invoke(ctx, TaskService_RuncQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) RuncGetPausePid(ctx context.Context, in *_go.RuncGetPausePidArgs, opts ...grpc.CallOption) (*_go.RuncGetPausePidResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_go.RuncGetPausePidResp)
	err := c.cc.Invoke(ctx, TaskService_RuncGetPausePid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) RuncManage(ctx context.Context, in *_go.RuncManageArgs, opts ...grpc.CallOption) (*_go.RuncManageResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_go.RuncManageResp)
	err := c.cc.Invoke(ctx, TaskService_RuncManage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) CRIORootfsDump(ctx context.Context, in *_go.CRIORootfsDumpArgs, opts ...grpc.CallOption) (*_go.CRIORootfsDumpResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_go.CRIORootfsDumpResp)
	err := c.cc.Invoke(ctx, TaskService_CRIORootfsDump_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) CRIOImagePush(ctx context.Context, in *_go.CRIOImagePushArgs, opts ...grpc.CallOption) (*_go.CRIOImagePushResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_go.CRIOImagePushResp)
	err := c.cc.Invoke(ctx, TaskService_CRIOImagePush_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) LogStreaming(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[_go.LogStreamingResp, _go.LogStreamingArgs], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TaskService_ServiceDesc.Streams[3], TaskService_LogStreaming_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[_go.LogStreamingResp, _go.LogStreamingArgs]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskService_LogStreamingClient = grpc.BidiStreamingClient[_go.LogStreamingResp, _go.LogStreamingArgs]

func (c *taskServiceClient) ProcessStateStreaming(ctx context.Context, in *_go.ProcessStateStreamingArgs, opts ...grpc.CallOption) (grpc.ServerStreamingClient[_go.ProcessState], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TaskService_ServiceDesc.Streams[4], TaskService_ProcessStateStreaming_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[_go.ProcessStateStreamingArgs, _go.ProcessState]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskService_ProcessStateStreamingClient = grpc.ServerStreamingClient[_go.ProcessState]

func (c *taskServiceClient) DetailedHealthCheck(ctx context.Context, in *_go.DetailedHealthCheckRequest, opts ...grpc.CallOption) (*_go.DetailedHealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_go.DetailedHealthCheckResponse)
	err := c.cc.Invoke(ctx, TaskService_DetailedHealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) KataDump(ctx context.Context, in *_go.DumpArgs, opts ...grpc.CallOption) (*_go.DumpResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_go.DumpResp)
	err := c.cc.Invoke(ctx, TaskService_KataDump_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) KataRestore(ctx context.Context, in *_go.RestoreArgs, opts ...grpc.CallOption) (*_go.RestoreResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_go.RestoreResp)
	err := c.cc.Invoke(ctx, TaskService_KataRestore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetConfig(ctx context.Context, in *_go.GetConfigRequest, opts ...grpc.CallOption) (*_go.GetConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_go.GetConfigResponse)
	err := c.cc.Invoke(ctx, TaskService_GetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) QueueCheckpoint(ctx context.Context, in *_go.QueueJobCheckpointRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, TaskService_QueueCheckpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) QueueRestore(ctx context.Context, in *_go.QueueJobRestoreRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, TaskService_QueueRestore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) JobStatus(ctx context.Context, in *_go.QueueJobID, opts ...grpc.CallOption) (*_go.QueueJobStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_go.QueueJobStatus)
	err := c.cc.Invoke(ctx, TaskService_JobStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetContainerInfo(ctx context.Context, in *_go.ContainerInfoRequest, opts ...grpc.CallOption) (*_go.ContainersInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_go.ContainersInfo)
	err := c.cc.Invoke(ctx, TaskService_GetContainerInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
// All implementations should embed UnimplementedTaskServiceServer
// for forward compatibility.
type TaskServiceServer interface {
	// Managed Job
	JobDump(context.Context, *_go.JobDumpArgs) (*_go.JobDumpResp, error)
	JobRestore(context.Context, *_go.JobRestoreArgs) (*_go.JobRestoreResp, error)
	JobRestoreAttach(grpc.BidiStreamingServer[_go.AttachArgs, _go.AttachResp]) error
	JobQuery(context.Context, *_go.JobQueryArgs) (*_go.JobQueryResp, error)
	// Process
	Start(context.Context, *_go.StartArgs) (*_go.StartResp, error)
	StartAttach(grpc.BidiStreamingServer[_go.AttachArgs, _go.AttachResp]) error
	Dump(context.Context, *_go.DumpArgs) (*_go.DumpResp, error)
	Restore(context.Context, *_go.RestoreArgs) (*_go.RestoreResp, error)
	RestoreAttach(grpc.BidiStreamingServer[_go.AttachArgs, _go.AttachResp]) error
	Manage(context.Context, *_go.ManageArgs) (*_go.ManageResp, error)
	// Containerd
	ContainerdDump(context.Context, *_go.ContainerdDumpArgs) (*_go.ContainerdDumpResp, error)
	ContainerdRestore(context.Context, *_go.ContainerdRestoreArgs) (*_go.ContainerdRestoreResp, error)
	ContainerdQuery(context.Context, *_go.ContainerdQueryArgs) (*_go.ContainerdQueryResp, error)
	ContainerdRootfsDump(context.Context, *_go.ContainerdRootfsDumpArgs) (*_go.ContainerdRootfsDumpResp, error)
	ContainerdRootfsRestore(context.Context, *_go.ContainerdRootfsRestoreArgs) (*_go.ContainerdRootfsRestoreResp, error)
	// Runc
	RuncDump(context.Context, *_go.RuncDumpArgs) (*_go.RuncDumpResp, error)
	RuncRestore(context.Context, *_go.RuncRestoreArgs) (*_go.RuncRestoreResp, error)
	RuncQuery(context.Context, *_go.RuncQueryArgs) (*_go.RuncQueryResp, error)
	RuncGetPausePid(context.Context, *_go.RuncGetPausePidArgs) (*_go.RuncGetPausePidResp, error)
	RuncManage(context.Context, *_go.RuncManageArgs) (*_go.RuncManageResp, error)
	// CRIO
	CRIORootfsDump(context.Context, *_go.CRIORootfsDumpArgs) (*_go.CRIORootfsDumpResp, error)
	CRIOImagePush(context.Context, *_go.CRIOImagePushArgs) (*_go.CRIOImagePushResp, error)
	// Streaming
	LogStreaming(grpc.BidiStreamingServer[_go.LogStreamingResp, _go.LogStreamingArgs]) error
	ProcessStateStreaming(*_go.ProcessStateStreamingArgs, grpc.ServerStreamingServer[_go.ProcessState]) error
	// Health
	DetailedHealthCheck(context.Context, *_go.DetailedHealthCheckRequest) (*_go.DetailedHealthCheckResponse, error)
	// Kata
	KataDump(context.Context, *_go.DumpArgs) (*_go.DumpResp, error)
	KataRestore(context.Context, *_go.RestoreArgs) (*_go.RestoreResp, error)
	// Config
	GetConfig(context.Context, *_go.GetConfigRequest) (*_go.GetConfigResponse, error)
	// JobQueue
	QueueCheckpoint(context.Context, *_go.QueueJobCheckpointRequest) (*wrapperspb.BoolValue, error)
	QueueRestore(context.Context, *_go.QueueJobRestoreRequest) (*wrapperspb.BoolValue, error)
	JobStatus(context.Context, *_go.QueueJobID) (*_go.QueueJobStatus, error)
	// ASR
	GetContainerInfo(context.Context, *_go.ContainerInfoRequest) (*_go.ContainersInfo, error)
}

// UnimplementedTaskServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskServiceServer struct{}

func (UnimplementedTaskServiceServer) JobDump(context.Context, *_go.JobDumpArgs) (*_go.JobDumpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobDump not implemented")
}
func (UnimplementedTaskServiceServer) JobRestore(context.Context, *_go.JobRestoreArgs) (*_go.JobRestoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobRestore not implemented")
}
func (UnimplementedTaskServiceServer) JobRestoreAttach(grpc.BidiStreamingServer[_go.AttachArgs, _go.AttachResp]) error {
	return status.Errorf(codes.Unimplemented, "method JobRestoreAttach not implemented")
}
func (UnimplementedTaskServiceServer) JobQuery(context.Context, *_go.JobQueryArgs) (*_go.JobQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobQuery not implemented")
}
func (UnimplementedTaskServiceServer) Start(context.Context, *_go.StartArgs) (*_go.StartResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedTaskServiceServer) StartAttach(grpc.BidiStreamingServer[_go.AttachArgs, _go.AttachResp]) error {
	return status.Errorf(codes.Unimplemented, "method StartAttach not implemented")
}
func (UnimplementedTaskServiceServer) Dump(context.Context, *_go.DumpArgs) (*_go.DumpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dump not implemented")
}
func (UnimplementedTaskServiceServer) Restore(context.Context, *_go.RestoreArgs) (*_go.RestoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedTaskServiceServer) RestoreAttach(grpc.BidiStreamingServer[_go.AttachArgs, _go.AttachResp]) error {
	return status.Errorf(codes.Unimplemented, "method RestoreAttach not implemented")
}
func (UnimplementedTaskServiceServer) Manage(context.Context, *_go.ManageArgs) (*_go.ManageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Manage not implemented")
}
func (UnimplementedTaskServiceServer) ContainerdDump(context.Context, *_go.ContainerdDumpArgs) (*_go.ContainerdDumpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerdDump not implemented")
}
func (UnimplementedTaskServiceServer) ContainerdRestore(context.Context, *_go.ContainerdRestoreArgs) (*_go.ContainerdRestoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerdRestore not implemented")
}
func (UnimplementedTaskServiceServer) ContainerdQuery(context.Context, *_go.ContainerdQueryArgs) (*_go.ContainerdQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerdQuery not implemented")
}
func (UnimplementedTaskServiceServer) ContainerdRootfsDump(context.Context, *_go.ContainerdRootfsDumpArgs) (*_go.ContainerdRootfsDumpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerdRootfsDump not implemented")
}
func (UnimplementedTaskServiceServer) ContainerdRootfsRestore(context.Context, *_go.ContainerdRootfsRestoreArgs) (*_go.ContainerdRootfsRestoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerdRootfsRestore not implemented")
}
func (UnimplementedTaskServiceServer) RuncDump(context.Context, *_go.RuncDumpArgs) (*_go.RuncDumpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RuncDump not implemented")
}
func (UnimplementedTaskServiceServer) RuncRestore(context.Context, *_go.RuncRestoreArgs) (*_go.RuncRestoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RuncRestore not implemented")
}
func (UnimplementedTaskServiceServer) RuncQuery(context.Context, *_go.RuncQueryArgs) (*_go.RuncQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RuncQuery not implemented")
}
func (UnimplementedTaskServiceServer) RuncGetPausePid(context.Context, *_go.RuncGetPausePidArgs) (*_go.RuncGetPausePidResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RuncGetPausePid not implemented")
}
func (UnimplementedTaskServiceServer) RuncManage(context.Context, *_go.RuncManageArgs) (*_go.RuncManageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RuncManage not implemented")
}
func (UnimplementedTaskServiceServer) CRIORootfsDump(context.Context, *_go.CRIORootfsDumpArgs) (*_go.CRIORootfsDumpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CRIORootfsDump not implemented")
}
func (UnimplementedTaskServiceServer) CRIOImagePush(context.Context, *_go.CRIOImagePushArgs) (*_go.CRIOImagePushResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CRIOImagePush not implemented")
}
func (UnimplementedTaskServiceServer) LogStreaming(grpc.BidiStreamingServer[_go.LogStreamingResp, _go.LogStreamingArgs]) error {
	return status.Errorf(codes.Unimplemented, "method LogStreaming not implemented")
}
func (UnimplementedTaskServiceServer) ProcessStateStreaming(*_go.ProcessStateStreamingArgs, grpc.ServerStreamingServer[_go.ProcessState]) error {
	return status.Errorf(codes.Unimplemented, "method ProcessStateStreaming not implemented")
}
func (UnimplementedTaskServiceServer) DetailedHealthCheck(context.Context, *_go.DetailedHealthCheckRequest) (*_go.DetailedHealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailedHealthCheck not implemented")
}
func (UnimplementedTaskServiceServer) KataDump(context.Context, *_go.DumpArgs) (*_go.DumpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KataDump not implemented")
}
func (UnimplementedTaskServiceServer) KataRestore(context.Context, *_go.RestoreArgs) (*_go.RestoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KataRestore not implemented")
}
func (UnimplementedTaskServiceServer) GetConfig(context.Context, *_go.GetConfigRequest) (*_go.GetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedTaskServiceServer) QueueCheckpoint(context.Context, *_go.QueueJobCheckpointRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueCheckpoint not implemented")
}
func (UnimplementedTaskServiceServer) QueueRestore(context.Context, *_go.QueueJobRestoreRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueRestore not implemented")
}
func (UnimplementedTaskServiceServer) JobStatus(context.Context, *_go.QueueJobID) (*_go.QueueJobStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobStatus not implemented")
}
func (UnimplementedTaskServiceServer) GetContainerInfo(context.Context, *_go.ContainerInfoRequest) (*_go.ContainersInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainerInfo not implemented")
}
func (UnimplementedTaskServiceServer) testEmbeddedByValue() {}

// UnsafeTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServiceServer will
// result in compilation errors.
type UnsafeTaskServiceServer interface {
	mustEmbedUnimplementedTaskServiceServer()
}

func RegisterTaskServiceServer(s grpc.ServiceRegistrar, srv TaskServiceServer) {
	// If the following call pancis, it indicates UnimplementedTaskServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskService_ServiceDesc, srv)
}

func _TaskService_JobDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.JobDumpArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).JobDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_JobDump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).JobDump(ctx, req.(*_go.JobDumpArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_JobRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.JobRestoreArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).JobRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_JobRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).JobRestore(ctx, req.(*_go.JobRestoreArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_JobRestoreAttach_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaskServiceServer).JobRestoreAttach(&grpc.GenericServerStream[_go.AttachArgs, _go.AttachResp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskService_JobRestoreAttachServer = grpc.BidiStreamingServer[_go.AttachArgs, _go.AttachResp]

func _TaskService_JobQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.JobQueryArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).JobQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_JobQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).JobQuery(ctx, req.(*_go.JobQueryArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.StartArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).Start(ctx, req.(*_go.StartArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_StartAttach_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaskServiceServer).StartAttach(&grpc.GenericServerStream[_go.AttachArgs, _go.AttachResp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskService_StartAttachServer = grpc.BidiStreamingServer[_go.AttachArgs, _go.AttachResp]

func _TaskService_Dump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.DumpArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).Dump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_Dump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).Dump(ctx, req.(*_go.DumpArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.RestoreArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).Restore(ctx, req.(*_go.RestoreArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_RestoreAttach_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaskServiceServer).RestoreAttach(&grpc.GenericServerStream[_go.AttachArgs, _go.AttachResp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskService_RestoreAttachServer = grpc.BidiStreamingServer[_go.AttachArgs, _go.AttachResp]

func _TaskService_Manage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.ManageArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).Manage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_Manage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).Manage(ctx, req.(*_go.ManageArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ContainerdDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.ContainerdDumpArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ContainerdDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_ContainerdDump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ContainerdDump(ctx, req.(*_go.ContainerdDumpArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ContainerdRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.ContainerdRestoreArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ContainerdRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_ContainerdRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ContainerdRestore(ctx, req.(*_go.ContainerdRestoreArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ContainerdQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.ContainerdQueryArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ContainerdQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_ContainerdQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ContainerdQuery(ctx, req.(*_go.ContainerdQueryArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ContainerdRootfsDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.ContainerdRootfsDumpArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ContainerdRootfsDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_ContainerdRootfsDump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ContainerdRootfsDump(ctx, req.(*_go.ContainerdRootfsDumpArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ContainerdRootfsRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.ContainerdRootfsRestoreArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ContainerdRootfsRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_ContainerdRootfsRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ContainerdRootfsRestore(ctx, req.(*_go.ContainerdRootfsRestoreArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_RuncDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.RuncDumpArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).RuncDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_RuncDump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).RuncDump(ctx, req.(*_go.RuncDumpArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_RuncRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.RuncRestoreArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).RuncRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_RuncRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).RuncRestore(ctx, req.(*_go.RuncRestoreArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_RuncQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.RuncQueryArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).RuncQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_RuncQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).RuncQuery(ctx, req.(*_go.RuncQueryArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_RuncGetPausePid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.RuncGetPausePidArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).RuncGetPausePid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_RuncGetPausePid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).RuncGetPausePid(ctx, req.(*_go.RuncGetPausePidArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_RuncManage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.RuncManageArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).RuncManage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_RuncManage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).RuncManage(ctx, req.(*_go.RuncManageArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_CRIORootfsDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.CRIORootfsDumpArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CRIORootfsDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_CRIORootfsDump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CRIORootfsDump(ctx, req.(*_go.CRIORootfsDumpArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_CRIOImagePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.CRIOImagePushArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CRIOImagePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_CRIOImagePush_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CRIOImagePush(ctx, req.(*_go.CRIOImagePushArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_LogStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaskServiceServer).LogStreaming(&grpc.GenericServerStream[_go.LogStreamingResp, _go.LogStreamingArgs]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskService_LogStreamingServer = grpc.BidiStreamingServer[_go.LogStreamingResp, _go.LogStreamingArgs]

func _TaskService_ProcessStateStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(_go.ProcessStateStreamingArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskServiceServer).ProcessStateStreaming(m, &grpc.GenericServerStream[_go.ProcessStateStreamingArgs, _go.ProcessState]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskService_ProcessStateStreamingServer = grpc.ServerStreamingServer[_go.ProcessState]

func _TaskService_DetailedHealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.DetailedHealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).DetailedHealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_DetailedHealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).DetailedHealthCheck(ctx, req.(*_go.DetailedHealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_KataDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.DumpArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).KataDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_KataDump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).KataDump(ctx, req.(*_go.DumpArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_KataRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.RestoreArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).KataRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_KataRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).KataRestore(ctx, req.(*_go.RestoreArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetConfig(ctx, req.(*_go.GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_QueueCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.QueueJobCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).QueueCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_QueueCheckpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).QueueCheckpoint(ctx, req.(*_go.QueueJobCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_QueueRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.QueueJobRestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).QueueRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_QueueRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).QueueRestore(ctx, req.(*_go.QueueJobRestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_JobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.QueueJobID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).JobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_JobStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).JobStatus(ctx, req.(*_go.QueueJobID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetContainerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.ContainerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetContainerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_GetContainerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetContainerInfo(ctx, req.(*_go.ContainerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskService_ServiceDesc is the grpc.ServiceDesc for TaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cedana.services.task.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JobDump",
			Handler:    _TaskService_JobDump_Handler,
		},
		{
			MethodName: "JobRestore",
			Handler:    _TaskService_JobRestore_Handler,
		},
		{
			MethodName: "JobQuery",
			Handler:    _TaskService_JobQuery_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _TaskService_Start_Handler,
		},
		{
			MethodName: "Dump",
			Handler:    _TaskService_Dump_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _TaskService_Restore_Handler,
		},
		{
			MethodName: "Manage",
			Handler:    _TaskService_Manage_Handler,
		},
		{
			MethodName: "ContainerdDump",
			Handler:    _TaskService_ContainerdDump_Handler,
		},
		{
			MethodName: "ContainerdRestore",
			Handler:    _TaskService_ContainerdRestore_Handler,
		},
		{
			MethodName: "ContainerdQuery",
			Handler:    _TaskService_ContainerdQuery_Handler,
		},
		{
			MethodName: "ContainerdRootfsDump",
			Handler:    _TaskService_ContainerdRootfsDump_Handler,
		},
		{
			MethodName: "ContainerdRootfsRestore",
			Handler:    _TaskService_ContainerdRootfsRestore_Handler,
		},
		{
			MethodName: "RuncDump",
			Handler:    _TaskService_RuncDump_Handler,
		},
		{
			MethodName: "RuncRestore",
			Handler:    _TaskService_RuncRestore_Handler,
		},
		{
			MethodName: "RuncQuery",
			Handler:    _TaskService_RuncQuery_Handler,
		},
		{
			MethodName: "RuncGetPausePid",
			Handler:    _TaskService_RuncGetPausePid_Handler,
		},
		{
			MethodName: "RuncManage",
			Handler:    _TaskService_RuncManage_Handler,
		},
		{
			MethodName: "CRIORootfsDump",
			Handler:    _TaskService_CRIORootfsDump_Handler,
		},
		{
			MethodName: "CRIOImagePush",
			Handler:    _TaskService_CRIOImagePush_Handler,
		},
		{
			MethodName: "DetailedHealthCheck",
			Handler:    _TaskService_DetailedHealthCheck_Handler,
		},
		{
			MethodName: "KataDump",
			Handler:    _TaskService_KataDump_Handler,
		},
		{
			MethodName: "KataRestore",
			Handler:    _TaskService_KataRestore_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _TaskService_GetConfig_Handler,
		},
		{
			MethodName: "QueueCheckpoint",
			Handler:    _TaskService_QueueCheckpoint_Handler,
		},
		{
			MethodName: "QueueRestore",
			Handler:    _TaskService_QueueRestore_Handler,
		},
		{
			MethodName: "JobStatus",
			Handler:    _TaskService_JobStatus_Handler,
		},
		{
			MethodName: "GetContainerInfo",
			Handler:    _TaskService_GetContainerInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JobRestoreAttach",
			Handler:       _TaskService_JobRestoreAttach_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StartAttach",
			Handler:       _TaskService_StartAttach_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RestoreAttach",
			Handler:       _TaskService_RestoreAttach_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "LogStreaming",
			Handler:       _TaskService_LogStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ProcessStateStreaming",
			Handler:       _TaskService_ProcessStateStreaming_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "task.proto",
}
